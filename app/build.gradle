apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

kapt {
  generateStubs = true
}

ext {
  versionMajor = 0
  versionMinor = 1
  versionPatch = 0
}

android {
  compileSdkVersion 27
  buildToolsVersion "27.0.1"

  defaultConfig {
    applicationId "com.mg.template"
    minSdkVersion 16
    targetSdkVersion 27
    versionCode getAppVersionCode()
    versionName getAppVersionName()
    testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    multiDexEnabled true

    compileOptions {
      sourceCompatibility JavaVersion.VERSION_1_8
      targetCompatibility JavaVersion.VERSION_1_8

      dexOptions {
        javaMaxHeapSize "4g"
      }
    }
  }

  buildTypes {

    def STRING = "String"
    def API_KEY = "API_KEY"
    def API_VERSION = "API_VERSION"

    debug {
      signingConfig signingConfigs.debug
      applicationIdSuffix ".development"
      versionNameSuffix " - dev" + " - " + getDate()
      buildConfigField(STRING, API_KEY, '"ibibr9Rdcl8TaP6lazAd29u2fnax02Sb7goXq2nK"')
      buildConfigField(STRING, API_VERSION, '"v1"')
    }

    release {
      minifyEnabled false
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
      buildConfigField(STRING, API_VERSION, '"v1"')
    }
  }
}

dependencies {
  final VC_RETROFIT = '2.3.0'
  final VC_RXJAVA = '2.1.5'
  final VC_RXANDROID = '2.0.1'
  final VC_SUPPORT = '27.0.2'
  final VC_MAP2 = '11.6.2'
  final VC_TIMBER = '4.5.1'
  final VC_DAGGER = '2.12'
  final VC_JUNIT = '4.12'
  final VC_PICASSO = '2.5.2'
  final VC_JODA = '2.9.6'
  final VC_MOCKITO = '2.8.9'
  final VC_KOTLIN_NHAARMAN = '1.5.0'

  def mockito = "org.mockito:mockito-core:$VC_MOCKITO"
  def daggerCompiler = "com.google.dagger:dagger-compiler:$VC_DAGGER"

  compile fileTree(dir: 'libs', include: ['*.jar'])
  androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
    exclude group: 'com.android.support', module: 'support-annotations'
  })

  //support lib
  compile "com.android.support:appcompat-v7:$VC_SUPPORT"
  compile "com.android.support:design:$VC_SUPPORT"
  compile "com.android.support:recyclerview-v7:$VC_SUPPORT"
  compile "com.google.android.gms:play-services-maps:$VC_MAP2"

  //http client
  compile "com.squareup.retrofit2:retrofit:$VC_RETROFIT"
  compile "com.squareup.retrofit2:converter-gson:$VC_RETROFIT" // to use gson within retrofit2
  compile "com.squareup.retrofit2:adapter-rxjava2:$VC_RETROFIT" // to use rx with retrofit2

  compile 'com.squareup.okhttp3:logging-interceptor:3.9.1'

  //rx
  compile 'com.android.support:multidex:1.0.2'
  compile "io.reactivex.rxjava2:rxandroid:$VC_RXANDROID"
  compile "io.reactivex.rxjava2:rxjava:$VC_RXJAVA"

  //logging
  compile "com.jakewharton.timber:timber:$VC_TIMBER"

  //dependency injection libraries
  compile "com.google.dagger:dagger:$VC_DAGGER"
  kapt "com.google.dagger:dagger-compiler:$VC_DAGGER"
  kapt daggerCompiler
  kapt "com.google.dagger:dagger-compiler:${VC_DAGGER}"

  //date
  compile "joda-time:joda-time:$VC_JODA"

  //image
  compile "com.squareup.picasso:picasso:$VC_PICASSO"

  //test
  testCompile "junit:junit:$VC_JUNIT"
  testCompile mockito
  testCompile 'pl.pragmatists:JUnitParams:1.0.5'
  testCompile "com.nhaarman:mockito-kotlin-kt1.1:$VC_KOTLIN_NHAARMAN"

  kapt daggerCompiler
  testCompile "joda-time:joda-time:$VC_JODA"
  compile "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"

  androidTestCompile "com.android.support:support-annotations:$support_version"
  androidTestCompile "com.android.support.test:runner:$testrunner_version"
  androidTestCompile "com.android.support.test:rules:$testrunner_version"
  androidTestCompile "com.android.support.test.espresso:espresso-core:$espresso_version"
  androidTestCompile("com.android.support.test.espresso:espresso-intents:$espresso_version")
  androidTestCompile 'org.hamcrest:hamcrest-library:1.3'
}
repositories {
  mavenCentral()
}

def getAppVersionCode() {
  return (versionMajor * 1000) + (versionMinor * 100) + (versionPatch)
}

def getAppVersionName() {
  return "${versionMajor}.${versionMinor}.${versionPatch}";
}

def getDate() {
  return new Date().format('dd.MM.yyyy HH:mm')
}